// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: ld.proto

package ld_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A response, true for Errors
// empty response for no error
type CreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error bool `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *CreateResponse) Reset() {
	*x = CreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ld_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateResponse) ProtoMessage() {}

func (x *CreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ld_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateResponse.ProtoReflect.Descriptor instead.
func (*CreateResponse) Descriptor() ([]byte, []int) {
	return file_ld_proto_rawDescGZIP(), []int{0}
}

func (x *CreateResponse) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

//The Key when querying directly for it
type Key struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"` // [(validate.rules).string { pattern: "(?i)^[0-9a-zA-Z_-.~]+$", max_len: 64 }];  // https://tools.ietf.org/html/rfc3986//section-2.3
}

func (x *Key) Reset() {
	*x = Key{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ld_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Key) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Key) ProtoMessage() {}

func (x *Key) ProtoReflect() protoreflect.Message {
	mi := &file_ld_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Key.ProtoReflect.Descriptor instead.
func (*Key) Descriptor() ([]byte, []int) {
	return file_ld_proto_rawDescGZIP(), []int{1}
}

func (x *Key) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

//A key-range is the only possibility of querying the data outside of a direct Key.
//The logical operator between using prefix, pattern and from-to together is AND.
//OR is not implemented as it can be done using more than one request
//Empty KeyRange implies a full database stream
type KeyRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//A key-prefix to search within.
	//when using prefix along-side pattern and/or from-to they should both match.
	// ie. a prefix "jo" could be used to speed up query speed of
	//     pattern "john*" or from: "john1" to: "john6"
	//the server will not try to guess a prefix from the pattern or from-to parameters
	Prefix string `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// RE2 style regex, see: https://github.com/google/re2/wiki/Syntax
	Pattern string `protobuf:"bytes,2,opt,name=pattern,proto3" json:"pattern,omitempty"`
	// both inclusive
	// required for discrete systems with discrete queries
	//  -- since you cannot reference a value outside of the last/first,
	//     and would then not be able to query the last/first record.
	From string `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	To   string `protobuf:"bytes,4,opt,name=to,proto3" json:"to,omitempty"`
}

func (x *KeyRange) Reset() {
	*x = KeyRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ld_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyRange) ProtoMessage() {}

func (x *KeyRange) ProtoReflect() protoreflect.Message {
	mi := &file_ld_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyRange.ProtoReflect.Descriptor instead.
func (*KeyRange) Descriptor() ([]byte, []int) {
	return file_ld_proto_rawDescGZIP(), []int{2}
}

func (x *KeyRange) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *KeyRange) GetPattern() string {
	if x != nil {
		return x.Pattern
	}
	return ""
}

func (x *KeyRange) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *KeyRange) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

type KeyValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	//You can easily replace this with google's Any if your want to
	//Or replace with your own message-type
	//
	//fx you have some software that simply expose data from a datasource
	//Your software exposes it as proto. This will be your datasource.
	// rewrite this .proto-file on the client side
	// add `import "your_messages_file.proto"`
	// replace the bytes of this with the type/format you wish to save
	// this works because string, bytes and nested messages are encoded the same:
	//   read https://developers.google.com/protocol-buffers/docs/encoding#strings
	//   and https://developers.google.com/protocol-buffers/docs/encoding#embedded
	Value *Feature `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *KeyValue) Reset() {
	*x = KeyValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ld_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValue) ProtoMessage() {}

func (x *KeyValue) ProtoReflect() protoreflect.Message {
	mi := &file_ld_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValue.ProtoReflect.Descriptor instead.
func (*KeyValue) Descriptor() ([]byte, []int) {
	return file_ld_proto_rawDescGZIP(), []int{3}
}

func (x *KeyValue) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KeyValue) GetValue() *Feature {
	if x != nil {
		return x.Value
	}
	return nil
}

var File_ld_proto protoreflect.FileDescriptor

var file_ld_proto_rawDesc = []byte{
	0x0a, 0x08, 0x6c, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x6c, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x6d, 0x79, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x26, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x17,
	0x0a, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x60, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x22, 0x45, 0x0a, 0x08, 0x4b, 0x65, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6c, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x32, 0x98, 0x04, 0x0a, 0x02, 0x6c, 0x64, 0x12, 0x36, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x12, 0x12, 0x2e, 0x6c, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x18, 0x2e, 0x6c, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3e, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x79, 0x12, 0x12, 0x2e,
	0x6c, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x1a, 0x18, 0x2e, 0x6c, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12,
	0x29, 0x0a, 0x04, 0x52, 0x65, 0x61, 0x64, 0x12, 0x0d, 0x2e, 0x6c, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x1a, 0x12, 0x2e, 0x6c, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x52, 0x65,
	0x61, 0x64, 0x4d, 0x61, 0x6e, 0x79, 0x12, 0x0d, 0x2e, 0x6c, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x1a, 0x12, 0x2e, 0x6c, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x35, 0x0a,
	0x09, 0x52, 0x65, 0x61, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x12, 0x2e, 0x6c, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x1a, 0x12,
	0x2e, 0x6c, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x30, 0x01, 0x12, 0x30, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x12,
	0x2e, 0x6c, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x1a, 0x12, 0x2e, 0x6c, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4d, 0x61, 0x6e, 0x79, 0x12, 0x12, 0x2e, 0x6c, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x12, 0x2e, 0x6c, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28, 0x01, 0x30, 0x01,
	0x12, 0x2b, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x0d, 0x2e, 0x6c, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x1a, 0x12, 0x2e, 0x6c, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x33, 0x0a,
	0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x79, 0x12, 0x0d, 0x2e, 0x6c, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x1a, 0x12, 0x2e, 0x6c, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28, 0x01,
	0x30, 0x01, 0x12, 0x37, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x12, 0x2e, 0x6c, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x1a, 0x12, 0x2e, 0x6c, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_ld_proto_rawDescOnce sync.Once
	file_ld_proto_rawDescData = file_ld_proto_rawDesc
)

func file_ld_proto_rawDescGZIP() []byte {
	file_ld_proto_rawDescOnce.Do(func() {
		file_ld_proto_rawDescData = protoimpl.X.CompressGZIP(file_ld_proto_rawDescData)
	})
	return file_ld_proto_rawDescData
}

var file_ld_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_ld_proto_goTypes = []interface{}{
	(*CreateResponse)(nil), // 0: ld.proto.CreateResponse
	(*Key)(nil),            // 1: ld.proto.Key
	(*KeyRange)(nil),       // 2: ld.proto.KeyRange
	(*KeyValue)(nil),       // 3: ld.proto.KeyValue
	(*Feature)(nil),        // 4: ld.proto.Feature
}
var file_ld_proto_depIdxs = []int32{
	4,  // 0: ld.proto.KeyValue.value:type_name -> ld.proto.Feature
	3,  // 1: ld.proto.ld.Create:input_type -> ld.proto.KeyValue
	3,  // 2: ld.proto.ld.CreateMany:input_type -> ld.proto.KeyValue
	1,  // 3: ld.proto.ld.Read:input_type -> ld.proto.Key
	1,  // 4: ld.proto.ld.ReadMany:input_type -> ld.proto.Key
	2,  // 5: ld.proto.ld.ReadRange:input_type -> ld.proto.KeyRange
	3,  // 6: ld.proto.ld.Update:input_type -> ld.proto.KeyValue
	3,  // 7: ld.proto.ld.UpdateMany:input_type -> ld.proto.KeyValue
	1,  // 8: ld.proto.ld.Delete:input_type -> ld.proto.Key
	1,  // 9: ld.proto.ld.DeleteMany:input_type -> ld.proto.Key
	2,  // 10: ld.proto.ld.DeleteRange:input_type -> ld.proto.KeyRange
	0,  // 11: ld.proto.ld.Create:output_type -> ld.proto.CreateResponse
	0,  // 12: ld.proto.ld.CreateMany:output_type -> ld.proto.CreateResponse
	3,  // 13: ld.proto.ld.Read:output_type -> ld.proto.KeyValue
	3,  // 14: ld.proto.ld.ReadMany:output_type -> ld.proto.KeyValue
	3,  // 15: ld.proto.ld.ReadRange:output_type -> ld.proto.KeyValue
	3,  // 16: ld.proto.ld.Update:output_type -> ld.proto.KeyValue
	3,  // 17: ld.proto.ld.UpdateMany:output_type -> ld.proto.KeyValue
	3,  // 18: ld.proto.ld.Delete:output_type -> ld.proto.KeyValue
	3,  // 19: ld.proto.ld.DeleteMany:output_type -> ld.proto.KeyValue
	3,  // 20: ld.proto.ld.DeleteRange:output_type -> ld.proto.KeyValue
	11, // [11:21] is the sub-list for method output_type
	1,  // [1:11] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_ld_proto_init() }
func file_ld_proto_init() {
	if File_ld_proto != nil {
		return
	}
	file_my_message_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ld_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ld_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Key); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ld_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ld_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ld_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ld_proto_goTypes,
		DependencyIndexes: file_ld_proto_depIdxs,
		MessageInfos:      file_ld_proto_msgTypes,
	}.Build()
	File_ld_proto = out.File
	file_ld_proto_rawDesc = nil
	file_ld_proto_goTypes = nil
	file_ld_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LdClient is the client API for Ld service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LdClient interface {
	Create(ctx context.Context, in *KeyValue, opts ...grpc.CallOption) (*CreateResponse, error)
	CreateMany(ctx context.Context, opts ...grpc.CallOption) (Ld_CreateManyClient, error)
	Read(ctx context.Context, in *Key, opts ...grpc.CallOption) (*KeyValue, error)
	ReadMany(ctx context.Context, opts ...grpc.CallOption) (Ld_ReadManyClient, error)
	ReadRange(ctx context.Context, in *KeyRange, opts ...grpc.CallOption) (Ld_ReadRangeClient, error)
	Update(ctx context.Context, in *KeyValue, opts ...grpc.CallOption) (*KeyValue, error)
	UpdateMany(ctx context.Context, opts ...grpc.CallOption) (Ld_UpdateManyClient, error)
	Delete(ctx context.Context, in *Key, opts ...grpc.CallOption) (*KeyValue, error)
	DeleteMany(ctx context.Context, opts ...grpc.CallOption) (Ld_DeleteManyClient, error)
	DeleteRange(ctx context.Context, in *KeyRange, opts ...grpc.CallOption) (Ld_DeleteRangeClient, error)
}

type ldClient struct {
	cc grpc.ClientConnInterface
}

func NewLdClient(cc grpc.ClientConnInterface) LdClient {
	return &ldClient{cc}
}

func (c *ldClient) Create(ctx context.Context, in *KeyValue, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/ld.proto.ld/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ldClient) CreateMany(ctx context.Context, opts ...grpc.CallOption) (Ld_CreateManyClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Ld_serviceDesc.Streams[0], "/ld.proto.ld/CreateMany", opts...)
	if err != nil {
		return nil, err
	}
	x := &ldCreateManyClient{stream}
	return x, nil
}

type Ld_CreateManyClient interface {
	Send(*KeyValue) error
	Recv() (*CreateResponse, error)
	grpc.ClientStream
}

type ldCreateManyClient struct {
	grpc.ClientStream
}

func (x *ldCreateManyClient) Send(m *KeyValue) error {
	return x.ClientStream.SendMsg(m)
}

func (x *ldCreateManyClient) Recv() (*CreateResponse, error) {
	m := new(CreateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ldClient) Read(ctx context.Context, in *Key, opts ...grpc.CallOption) (*KeyValue, error) {
	out := new(KeyValue)
	err := c.cc.Invoke(ctx, "/ld.proto.ld/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ldClient) ReadMany(ctx context.Context, opts ...grpc.CallOption) (Ld_ReadManyClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Ld_serviceDesc.Streams[1], "/ld.proto.ld/ReadMany", opts...)
	if err != nil {
		return nil, err
	}
	x := &ldReadManyClient{stream}
	return x, nil
}

type Ld_ReadManyClient interface {
	Send(*Key) error
	Recv() (*KeyValue, error)
	grpc.ClientStream
}

type ldReadManyClient struct {
	grpc.ClientStream
}

func (x *ldReadManyClient) Send(m *Key) error {
	return x.ClientStream.SendMsg(m)
}

func (x *ldReadManyClient) Recv() (*KeyValue, error) {
	m := new(KeyValue)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ldClient) ReadRange(ctx context.Context, in *KeyRange, opts ...grpc.CallOption) (Ld_ReadRangeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Ld_serviceDesc.Streams[2], "/ld.proto.ld/ReadRange", opts...)
	if err != nil {
		return nil, err
	}
	x := &ldReadRangeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Ld_ReadRangeClient interface {
	Recv() (*KeyValue, error)
	grpc.ClientStream
}

type ldReadRangeClient struct {
	grpc.ClientStream
}

func (x *ldReadRangeClient) Recv() (*KeyValue, error) {
	m := new(KeyValue)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ldClient) Update(ctx context.Context, in *KeyValue, opts ...grpc.CallOption) (*KeyValue, error) {
	out := new(KeyValue)
	err := c.cc.Invoke(ctx, "/ld.proto.ld/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ldClient) UpdateMany(ctx context.Context, opts ...grpc.CallOption) (Ld_UpdateManyClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Ld_serviceDesc.Streams[3], "/ld.proto.ld/UpdateMany", opts...)
	if err != nil {
		return nil, err
	}
	x := &ldUpdateManyClient{stream}
	return x, nil
}

type Ld_UpdateManyClient interface {
	Send(*KeyValue) error
	Recv() (*KeyValue, error)
	grpc.ClientStream
}

type ldUpdateManyClient struct {
	grpc.ClientStream
}

func (x *ldUpdateManyClient) Send(m *KeyValue) error {
	return x.ClientStream.SendMsg(m)
}

func (x *ldUpdateManyClient) Recv() (*KeyValue, error) {
	m := new(KeyValue)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ldClient) Delete(ctx context.Context, in *Key, opts ...grpc.CallOption) (*KeyValue, error) {
	out := new(KeyValue)
	err := c.cc.Invoke(ctx, "/ld.proto.ld/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ldClient) DeleteMany(ctx context.Context, opts ...grpc.CallOption) (Ld_DeleteManyClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Ld_serviceDesc.Streams[4], "/ld.proto.ld/DeleteMany", opts...)
	if err != nil {
		return nil, err
	}
	x := &ldDeleteManyClient{stream}
	return x, nil
}

type Ld_DeleteManyClient interface {
	Send(*Key) error
	Recv() (*KeyValue, error)
	grpc.ClientStream
}

type ldDeleteManyClient struct {
	grpc.ClientStream
}

func (x *ldDeleteManyClient) Send(m *Key) error {
	return x.ClientStream.SendMsg(m)
}

func (x *ldDeleteManyClient) Recv() (*KeyValue, error) {
	m := new(KeyValue)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ldClient) DeleteRange(ctx context.Context, in *KeyRange, opts ...grpc.CallOption) (Ld_DeleteRangeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Ld_serviceDesc.Streams[5], "/ld.proto.ld/DeleteRange", opts...)
	if err != nil {
		return nil, err
	}
	x := &ldDeleteRangeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Ld_DeleteRangeClient interface {
	Recv() (*KeyValue, error)
	grpc.ClientStream
}

type ldDeleteRangeClient struct {
	grpc.ClientStream
}

func (x *ldDeleteRangeClient) Recv() (*KeyValue, error) {
	m := new(KeyValue)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LdServer is the server API for Ld service.
type LdServer interface {
	Create(context.Context, *KeyValue) (*CreateResponse, error)
	CreateMany(Ld_CreateManyServer) error
	Read(context.Context, *Key) (*KeyValue, error)
	ReadMany(Ld_ReadManyServer) error
	ReadRange(*KeyRange, Ld_ReadRangeServer) error
	Update(context.Context, *KeyValue) (*KeyValue, error)
	UpdateMany(Ld_UpdateManyServer) error
	Delete(context.Context, *Key) (*KeyValue, error)
	DeleteMany(Ld_DeleteManyServer) error
	DeleteRange(*KeyRange, Ld_DeleteRangeServer) error
}

// UnimplementedLdServer can be embedded to have forward compatible implementations.
type UnimplementedLdServer struct {
}

func (*UnimplementedLdServer) Create(context.Context, *KeyValue) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedLdServer) CreateMany(Ld_CreateManyServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateMany not implemented")
}
func (*UnimplementedLdServer) Read(context.Context, *Key) (*KeyValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (*UnimplementedLdServer) ReadMany(Ld_ReadManyServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadMany not implemented")
}
func (*UnimplementedLdServer) ReadRange(*KeyRange, Ld_ReadRangeServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadRange not implemented")
}
func (*UnimplementedLdServer) Update(context.Context, *KeyValue) (*KeyValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedLdServer) UpdateMany(Ld_UpdateManyServer) error {
	return status.Errorf(codes.Unimplemented, "method UpdateMany not implemented")
}
func (*UnimplementedLdServer) Delete(context.Context, *Key) (*KeyValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedLdServer) DeleteMany(Ld_DeleteManyServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteMany not implemented")
}
func (*UnimplementedLdServer) DeleteRange(*KeyRange, Ld_DeleteRangeServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteRange not implemented")
}

func RegisterLdServer(s *grpc.Server, srv LdServer) {
	s.RegisterService(&_Ld_serviceDesc, srv)
}

func _Ld_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LdServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ld.proto.ld/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LdServer).Create(ctx, req.(*KeyValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ld_CreateMany_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LdServer).CreateMany(&ldCreateManyServer{stream})
}

type Ld_CreateManyServer interface {
	Send(*CreateResponse) error
	Recv() (*KeyValue, error)
	grpc.ServerStream
}

type ldCreateManyServer struct {
	grpc.ServerStream
}

func (x *ldCreateManyServer) Send(m *CreateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *ldCreateManyServer) Recv() (*KeyValue, error) {
	m := new(KeyValue)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Ld_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LdServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ld.proto.ld/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LdServer).Read(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ld_ReadMany_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LdServer).ReadMany(&ldReadManyServer{stream})
}

type Ld_ReadManyServer interface {
	Send(*KeyValue) error
	Recv() (*Key, error)
	grpc.ServerStream
}

type ldReadManyServer struct {
	grpc.ServerStream
}

func (x *ldReadManyServer) Send(m *KeyValue) error {
	return x.ServerStream.SendMsg(m)
}

func (x *ldReadManyServer) Recv() (*Key, error) {
	m := new(Key)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Ld_ReadRange_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(KeyRange)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LdServer).ReadRange(m, &ldReadRangeServer{stream})
}

type Ld_ReadRangeServer interface {
	Send(*KeyValue) error
	grpc.ServerStream
}

type ldReadRangeServer struct {
	grpc.ServerStream
}

func (x *ldReadRangeServer) Send(m *KeyValue) error {
	return x.ServerStream.SendMsg(m)
}

func _Ld_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LdServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ld.proto.ld/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LdServer).Update(ctx, req.(*KeyValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ld_UpdateMany_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LdServer).UpdateMany(&ldUpdateManyServer{stream})
}

type Ld_UpdateManyServer interface {
	Send(*KeyValue) error
	Recv() (*KeyValue, error)
	grpc.ServerStream
}

type ldUpdateManyServer struct {
	grpc.ServerStream
}

func (x *ldUpdateManyServer) Send(m *KeyValue) error {
	return x.ServerStream.SendMsg(m)
}

func (x *ldUpdateManyServer) Recv() (*KeyValue, error) {
	m := new(KeyValue)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Ld_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LdServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ld.proto.ld/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LdServer).Delete(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ld_DeleteMany_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LdServer).DeleteMany(&ldDeleteManyServer{stream})
}

type Ld_DeleteManyServer interface {
	Send(*KeyValue) error
	Recv() (*Key, error)
	grpc.ServerStream
}

type ldDeleteManyServer struct {
	grpc.ServerStream
}

func (x *ldDeleteManyServer) Send(m *KeyValue) error {
	return x.ServerStream.SendMsg(m)
}

func (x *ldDeleteManyServer) Recv() (*Key, error) {
	m := new(Key)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Ld_DeleteRange_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(KeyRange)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LdServer).DeleteRange(m, &ldDeleteRangeServer{stream})
}

type Ld_DeleteRangeServer interface {
	Send(*KeyValue) error
	grpc.ServerStream
}

type ldDeleteRangeServer struct {
	grpc.ServerStream
}

func (x *ldDeleteRangeServer) Send(m *KeyValue) error {
	return x.ServerStream.SendMsg(m)
}

var _Ld_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ld.proto.ld",
	HandlerType: (*LdServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Ld_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _Ld_Read_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Ld_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Ld_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateMany",
			Handler:       _Ld_CreateMany_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ReadMany",
			Handler:       _Ld_ReadMany_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ReadRange",
			Handler:       _Ld_ReadRange_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UpdateMany",
			Handler:       _Ld_UpdateMany_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "DeleteMany",
			Handler:       _Ld_DeleteMany_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "DeleteRange",
			Handler:       _Ld_DeleteRange_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ld.proto",
}
