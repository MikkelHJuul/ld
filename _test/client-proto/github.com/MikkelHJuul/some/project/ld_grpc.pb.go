// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package project

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MyDataClient is the client API for MyData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MyDataClient interface {
	//empty response means success
	//the database returns your KeyValue for errors
	Set(ctx context.Context, in *KeyValue, opts ...grpc.CallOption) (*KeyValue, error)
	SetMany(ctx context.Context, opts ...grpc.CallOption) (MyData_SetManyClient, error)
	//empty responses means no such key.
	Get(ctx context.Context, in *Key, opts ...grpc.CallOption) (*KeyValue, error)
	GetMany(ctx context.Context, opts ...grpc.CallOption) (MyData_GetManyClient, error)
	GetRange(ctx context.Context, in *KeyRange, opts ...grpc.CallOption) (MyData_GetRangeClient, error)
	//returns the deleted object, empty means no such key
	Delete(ctx context.Context, in *Key, opts ...grpc.CallOption) (*KeyValue, error)
	DeleteMany(ctx context.Context, opts ...grpc.CallOption) (MyData_DeleteManyClient, error)
	DeleteRange(ctx context.Context, in *KeyRange, opts ...grpc.CallOption) (MyData_DeleteRangeClient, error)
}

type myDataClient struct {
	cc grpc.ClientConnInterface
}

func NewMyDataClient(cc grpc.ClientConnInterface) MyDataClient {
	return &myDataClient{cc}
}

func (c *myDataClient) Set(ctx context.Context, in *KeyValue, opts ...grpc.CallOption) (*KeyValue, error) {
	out := new(KeyValue)
	err := c.cc.Invoke(ctx, "/com.github.some.project.MyData/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myDataClient) SetMany(ctx context.Context, opts ...grpc.CallOption) (MyData_SetManyClient, error) {
	stream, err := c.cc.NewStream(ctx, &MyData_ServiceDesc.Streams[0], "/com.github.some.project.MyData/SetMany", opts...)
	if err != nil {
		return nil, err
	}
	x := &myDataSetManyClient{stream}
	return x, nil
}

type MyData_SetManyClient interface {
	Send(*KeyValue) error
	Recv() (*KeyValue, error)
	grpc.ClientStream
}

type myDataSetManyClient struct {
	grpc.ClientStream
}

func (x *myDataSetManyClient) Send(m *KeyValue) error {
	return x.ClientStream.SendMsg(m)
}

func (x *myDataSetManyClient) Recv() (*KeyValue, error) {
	m := new(KeyValue)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *myDataClient) Get(ctx context.Context, in *Key, opts ...grpc.CallOption) (*KeyValue, error) {
	out := new(KeyValue)
	err := c.cc.Invoke(ctx, "/com.github.some.project.MyData/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myDataClient) GetMany(ctx context.Context, opts ...grpc.CallOption) (MyData_GetManyClient, error) {
	stream, err := c.cc.NewStream(ctx, &MyData_ServiceDesc.Streams[1], "/com.github.some.project.MyData/GetMany", opts...)
	if err != nil {
		return nil, err
	}
	x := &myDataGetManyClient{stream}
	return x, nil
}

type MyData_GetManyClient interface {
	Send(*Key) error
	Recv() (*KeyValue, error)
	grpc.ClientStream
}

type myDataGetManyClient struct {
	grpc.ClientStream
}

func (x *myDataGetManyClient) Send(m *Key) error {
	return x.ClientStream.SendMsg(m)
}

func (x *myDataGetManyClient) Recv() (*KeyValue, error) {
	m := new(KeyValue)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *myDataClient) GetRange(ctx context.Context, in *KeyRange, opts ...grpc.CallOption) (MyData_GetRangeClient, error) {
	stream, err := c.cc.NewStream(ctx, &MyData_ServiceDesc.Streams[2], "/com.github.some.project.MyData/GetRange", opts...)
	if err != nil {
		return nil, err
	}
	x := &myDataGetRangeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MyData_GetRangeClient interface {
	Recv() (*KeyValue, error)
	grpc.ClientStream
}

type myDataGetRangeClient struct {
	grpc.ClientStream
}

func (x *myDataGetRangeClient) Recv() (*KeyValue, error) {
	m := new(KeyValue)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *myDataClient) Delete(ctx context.Context, in *Key, opts ...grpc.CallOption) (*KeyValue, error) {
	out := new(KeyValue)
	err := c.cc.Invoke(ctx, "/com.github.some.project.MyData/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myDataClient) DeleteMany(ctx context.Context, opts ...grpc.CallOption) (MyData_DeleteManyClient, error) {
	stream, err := c.cc.NewStream(ctx, &MyData_ServiceDesc.Streams[3], "/com.github.some.project.MyData/DeleteMany", opts...)
	if err != nil {
		return nil, err
	}
	x := &myDataDeleteManyClient{stream}
	return x, nil
}

type MyData_DeleteManyClient interface {
	Send(*Key) error
	Recv() (*KeyValue, error)
	grpc.ClientStream
}

type myDataDeleteManyClient struct {
	grpc.ClientStream
}

func (x *myDataDeleteManyClient) Send(m *Key) error {
	return x.ClientStream.SendMsg(m)
}

func (x *myDataDeleteManyClient) Recv() (*KeyValue, error) {
	m := new(KeyValue)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *myDataClient) DeleteRange(ctx context.Context, in *KeyRange, opts ...grpc.CallOption) (MyData_DeleteRangeClient, error) {
	stream, err := c.cc.NewStream(ctx, &MyData_ServiceDesc.Streams[4], "/com.github.some.project.MyData/DeleteRange", opts...)
	if err != nil {
		return nil, err
	}
	x := &myDataDeleteRangeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MyData_DeleteRangeClient interface {
	Recv() (*KeyValue, error)
	grpc.ClientStream
}

type myDataDeleteRangeClient struct {
	grpc.ClientStream
}

func (x *myDataDeleteRangeClient) Recv() (*KeyValue, error) {
	m := new(KeyValue)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MyDataServer is the server API for MyData service.
// All implementations must embed UnimplementedMyDataServer
// for forward compatibility
type MyDataServer interface {
	//empty response means success
	//the database returns your KeyValue for errors
	Set(context.Context, *KeyValue) (*KeyValue, error)
	SetMany(MyData_SetManyServer) error
	//empty responses means no such key.
	Get(context.Context, *Key) (*KeyValue, error)
	GetMany(MyData_GetManyServer) error
	GetRange(*KeyRange, MyData_GetRangeServer) error
	//returns the deleted object, empty means no such key
	Delete(context.Context, *Key) (*KeyValue, error)
	DeleteMany(MyData_DeleteManyServer) error
	DeleteRange(*KeyRange, MyData_DeleteRangeServer) error
	mustEmbedUnimplementedMyDataServer()
}

// UnimplementedMyDataServer must be embedded to have forward compatible implementations.
type UnimplementedMyDataServer struct {
}

func (UnimplementedMyDataServer) Set(context.Context, *KeyValue) (*KeyValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedMyDataServer) SetMany(MyData_SetManyServer) error {
	return status.Errorf(codes.Unimplemented, "method SetMany not implemented")
}
func (UnimplementedMyDataServer) Get(context.Context, *Key) (*KeyValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedMyDataServer) GetMany(MyData_GetManyServer) error {
	return status.Errorf(codes.Unimplemented, "method GetMany not implemented")
}
func (UnimplementedMyDataServer) GetRange(*KeyRange, MyData_GetRangeServer) error {
	return status.Errorf(codes.Unimplemented, "method GetRange not implemented")
}
func (UnimplementedMyDataServer) Delete(context.Context, *Key) (*KeyValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedMyDataServer) DeleteMany(MyData_DeleteManyServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteMany not implemented")
}
func (UnimplementedMyDataServer) DeleteRange(*KeyRange, MyData_DeleteRangeServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteRange not implemented")
}
func (UnimplementedMyDataServer) mustEmbedUnimplementedMyDataServer() {}

// UnsafeMyDataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MyDataServer will
// result in compilation errors.
type UnsafeMyDataServer interface {
	mustEmbedUnimplementedMyDataServer()
}

func RegisterMyDataServer(s grpc.ServiceRegistrar, srv MyDataServer) {
	s.RegisterService(&MyData_ServiceDesc, srv)
}

func _MyData_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyDataServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.github.some.project.MyData/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyDataServer).Set(ctx, req.(*KeyValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyData_SetMany_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MyDataServer).SetMany(&myDataSetManyServer{stream})
}

type MyData_SetManyServer interface {
	Send(*KeyValue) error
	Recv() (*KeyValue, error)
	grpc.ServerStream
}

type myDataSetManyServer struct {
	grpc.ServerStream
}

func (x *myDataSetManyServer) Send(m *KeyValue) error {
	return x.ServerStream.SendMsg(m)
}

func (x *myDataSetManyServer) Recv() (*KeyValue, error) {
	m := new(KeyValue)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MyData_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyDataServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.github.some.project.MyData/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyDataServer).Get(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyData_GetMany_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MyDataServer).GetMany(&myDataGetManyServer{stream})
}

type MyData_GetManyServer interface {
	Send(*KeyValue) error
	Recv() (*Key, error)
	grpc.ServerStream
}

type myDataGetManyServer struct {
	grpc.ServerStream
}

func (x *myDataGetManyServer) Send(m *KeyValue) error {
	return x.ServerStream.SendMsg(m)
}

func (x *myDataGetManyServer) Recv() (*Key, error) {
	m := new(Key)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MyData_GetRange_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(KeyRange)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MyDataServer).GetRange(m, &myDataGetRangeServer{stream})
}

type MyData_GetRangeServer interface {
	Send(*KeyValue) error
	grpc.ServerStream
}

type myDataGetRangeServer struct {
	grpc.ServerStream
}

func (x *myDataGetRangeServer) Send(m *KeyValue) error {
	return x.ServerStream.SendMsg(m)
}

func _MyData_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyDataServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.github.some.project.MyData/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyDataServer).Delete(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyData_DeleteMany_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MyDataServer).DeleteMany(&myDataDeleteManyServer{stream})
}

type MyData_DeleteManyServer interface {
	Send(*KeyValue) error
	Recv() (*Key, error)
	grpc.ServerStream
}

type myDataDeleteManyServer struct {
	grpc.ServerStream
}

func (x *myDataDeleteManyServer) Send(m *KeyValue) error {
	return x.ServerStream.SendMsg(m)
}

func (x *myDataDeleteManyServer) Recv() (*Key, error) {
	m := new(Key)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MyData_DeleteRange_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(KeyRange)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MyDataServer).DeleteRange(m, &myDataDeleteRangeServer{stream})
}

type MyData_DeleteRangeServer interface {
	Send(*KeyValue) error
	grpc.ServerStream
}

type myDataDeleteRangeServer struct {
	grpc.ServerStream
}

func (x *myDataDeleteRangeServer) Send(m *KeyValue) error {
	return x.ServerStream.SendMsg(m)
}

// MyData_ServiceDesc is the grpc.ServiceDesc for MyData service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MyData_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.github.some.project.MyData",
	HandlerType: (*MyDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Set",
			Handler:    _MyData_Set_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _MyData_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _MyData_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SetMany",
			Handler:       _MyData_SetMany_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetMany",
			Handler:       _MyData_GetMany_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetRange",
			Handler:       _MyData_GetRange_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeleteMany",
			Handler:       _MyData_DeleteMany_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "DeleteRange",
			Handler:       _MyData_DeleteRange_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ld.proto",
}
