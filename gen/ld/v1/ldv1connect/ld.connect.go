// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: ld/v1/ld.proto

package ldv1connect

import (
	context "context"
	errors "errors"
	v1 "github.com/MikkelHJuul/ld/gen/ld/v1"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// LdServiceName is the fully-qualified name of the LdService service.
	LdServiceName = "ld.v1.LdService"
)

// LdServiceClient is a client for the ld.v1.LdService service.
type LdServiceClient interface {
	//empty response means success
	//the database returns your KeyValue for errors
	Set(context.Context, *connect_go.Request[v1.SetRequest]) (*connect_go.Response[v1.SetResponse], error)
	SetMany(context.Context) *connect_go.BidiStreamForClient[v1.SetManyRequest, v1.SetManyResponse]
	//empty responses means no such key.
	Get(context.Context, *connect_go.Request[v1.GetRequest]) (*connect_go.Response[v1.GetResponse], error)
	GetMany(context.Context) *connect_go.BidiStreamForClient[v1.GetManyRequest, v1.GetManyResponse]
	GetRange(context.Context, *connect_go.Request[v1.GetRangeRequest]) (*connect_go.ServerStreamForClient[v1.GetRangeResponse], error)
	//returns the deleted object, empty means no such key
	Delete(context.Context, *connect_go.Request[v1.DeleteRequest]) (*connect_go.Response[v1.DeleteResponse], error)
	DeleteMany(context.Context) *connect_go.BidiStreamForClient[v1.DeleteManyRequest, v1.DeleteManyResponse]
	DeleteRange(context.Context, *connect_go.Request[v1.DeleteRangeRequest]) (*connect_go.ServerStreamForClient[v1.DeleteRangeResponse], error)
}

// NewLdServiceClient constructs a client for the ld.v1.LdService service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewLdServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) LdServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &ldServiceClient{
		set: connect_go.NewClient[v1.SetRequest, v1.SetResponse](
			httpClient,
			baseURL+"/ld.v1.LdService/Set",
			opts...,
		),
		setMany: connect_go.NewClient[v1.SetManyRequest, v1.SetManyResponse](
			httpClient,
			baseURL+"/ld.v1.LdService/SetMany",
			opts...,
		),
		get: connect_go.NewClient[v1.GetRequest, v1.GetResponse](
			httpClient,
			baseURL+"/ld.v1.LdService/Get",
			opts...,
		),
		getMany: connect_go.NewClient[v1.GetManyRequest, v1.GetManyResponse](
			httpClient,
			baseURL+"/ld.v1.LdService/GetMany",
			opts...,
		),
		getRange: connect_go.NewClient[v1.GetRangeRequest, v1.GetRangeResponse](
			httpClient,
			baseURL+"/ld.v1.LdService/GetRange",
			opts...,
		),
		delete: connect_go.NewClient[v1.DeleteRequest, v1.DeleteResponse](
			httpClient,
			baseURL+"/ld.v1.LdService/Delete",
			opts...,
		),
		deleteMany: connect_go.NewClient[v1.DeleteManyRequest, v1.DeleteManyResponse](
			httpClient,
			baseURL+"/ld.v1.LdService/DeleteMany",
			opts...,
		),
		deleteRange: connect_go.NewClient[v1.DeleteRangeRequest, v1.DeleteRangeResponse](
			httpClient,
			baseURL+"/ld.v1.LdService/DeleteRange",
			opts...,
		),
	}
}

// ldServiceClient implements LdServiceClient.
type ldServiceClient struct {
	set         *connect_go.Client[v1.SetRequest, v1.SetResponse]
	setMany     *connect_go.Client[v1.SetManyRequest, v1.SetManyResponse]
	get         *connect_go.Client[v1.GetRequest, v1.GetResponse]
	getMany     *connect_go.Client[v1.GetManyRequest, v1.GetManyResponse]
	getRange    *connect_go.Client[v1.GetRangeRequest, v1.GetRangeResponse]
	delete      *connect_go.Client[v1.DeleteRequest, v1.DeleteResponse]
	deleteMany  *connect_go.Client[v1.DeleteManyRequest, v1.DeleteManyResponse]
	deleteRange *connect_go.Client[v1.DeleteRangeRequest, v1.DeleteRangeResponse]
}

// Set calls ld.v1.LdService.Set.
func (c *ldServiceClient) Set(ctx context.Context, req *connect_go.Request[v1.SetRequest]) (*connect_go.Response[v1.SetResponse], error) {
	return c.set.CallUnary(ctx, req)
}

// SetMany calls ld.v1.LdService.SetMany.
func (c *ldServiceClient) SetMany(ctx context.Context) *connect_go.BidiStreamForClient[v1.SetManyRequest, v1.SetManyResponse] {
	return c.setMany.CallBidiStream(ctx)
}

// Get calls ld.v1.LdService.Get.
func (c *ldServiceClient) Get(ctx context.Context, req *connect_go.Request[v1.GetRequest]) (*connect_go.Response[v1.GetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// GetMany calls ld.v1.LdService.GetMany.
func (c *ldServiceClient) GetMany(ctx context.Context) *connect_go.BidiStreamForClient[v1.GetManyRequest, v1.GetManyResponse] {
	return c.getMany.CallBidiStream(ctx)
}

// GetRange calls ld.v1.LdService.GetRange.
func (c *ldServiceClient) GetRange(ctx context.Context, req *connect_go.Request[v1.GetRangeRequest]) (*connect_go.ServerStreamForClient[v1.GetRangeResponse], error) {
	return c.getRange.CallServerStream(ctx, req)
}

// Delete calls ld.v1.LdService.Delete.
func (c *ldServiceClient) Delete(ctx context.Context, req *connect_go.Request[v1.DeleteRequest]) (*connect_go.Response[v1.DeleteResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// DeleteMany calls ld.v1.LdService.DeleteMany.
func (c *ldServiceClient) DeleteMany(ctx context.Context) *connect_go.BidiStreamForClient[v1.DeleteManyRequest, v1.DeleteManyResponse] {
	return c.deleteMany.CallBidiStream(ctx)
}

// DeleteRange calls ld.v1.LdService.DeleteRange.
func (c *ldServiceClient) DeleteRange(ctx context.Context, req *connect_go.Request[v1.DeleteRangeRequest]) (*connect_go.ServerStreamForClient[v1.DeleteRangeResponse], error) {
	return c.deleteRange.CallServerStream(ctx, req)
}

// LdServiceHandler is an implementation of the ld.v1.LdService service.
type LdServiceHandler interface {
	//empty response means success
	//the database returns your KeyValue for errors
	Set(context.Context, *connect_go.Request[v1.SetRequest]) (*connect_go.Response[v1.SetResponse], error)
	SetMany(context.Context, *connect_go.BidiStream[v1.SetManyRequest, v1.SetManyResponse]) error
	//empty responses means no such key.
	Get(context.Context, *connect_go.Request[v1.GetRequest]) (*connect_go.Response[v1.GetResponse], error)
	GetMany(context.Context, *connect_go.BidiStream[v1.GetManyRequest, v1.GetManyResponse]) error
	GetRange(context.Context, *connect_go.Request[v1.GetRangeRequest], *connect_go.ServerStream[v1.GetRangeResponse]) error
	//returns the deleted object, empty means no such key
	Delete(context.Context, *connect_go.Request[v1.DeleteRequest]) (*connect_go.Response[v1.DeleteResponse], error)
	DeleteMany(context.Context, *connect_go.BidiStream[v1.DeleteManyRequest, v1.DeleteManyResponse]) error
	DeleteRange(context.Context, *connect_go.Request[v1.DeleteRangeRequest], *connect_go.ServerStream[v1.DeleteRangeResponse]) error
}

// NewLdServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewLdServiceHandler(svc LdServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/ld.v1.LdService/Set", connect_go.NewUnaryHandler(
		"/ld.v1.LdService/Set",
		svc.Set,
		opts...,
	))
	mux.Handle("/ld.v1.LdService/SetMany", connect_go.NewBidiStreamHandler(
		"/ld.v1.LdService/SetMany",
		svc.SetMany,
		opts...,
	))
	mux.Handle("/ld.v1.LdService/Get", connect_go.NewUnaryHandler(
		"/ld.v1.LdService/Get",
		svc.Get,
		opts...,
	))
	mux.Handle("/ld.v1.LdService/GetMany", connect_go.NewBidiStreamHandler(
		"/ld.v1.LdService/GetMany",
		svc.GetMany,
		opts...,
	))
	mux.Handle("/ld.v1.LdService/GetRange", connect_go.NewServerStreamHandler(
		"/ld.v1.LdService/GetRange",
		svc.GetRange,
		opts...,
	))
	mux.Handle("/ld.v1.LdService/Delete", connect_go.NewUnaryHandler(
		"/ld.v1.LdService/Delete",
		svc.Delete,
		opts...,
	))
	mux.Handle("/ld.v1.LdService/DeleteMany", connect_go.NewBidiStreamHandler(
		"/ld.v1.LdService/DeleteMany",
		svc.DeleteMany,
		opts...,
	))
	mux.Handle("/ld.v1.LdService/DeleteRange", connect_go.NewServerStreamHandler(
		"/ld.v1.LdService/DeleteRange",
		svc.DeleteRange,
		opts...,
	))
	return "/ld.v1.LdService/", mux
}

// UnimplementedLdServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedLdServiceHandler struct{}

func (UnimplementedLdServiceHandler) Set(context.Context, *connect_go.Request[v1.SetRequest]) (*connect_go.Response[v1.SetResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ld.v1.LdService.Set is not implemented"))
}

func (UnimplementedLdServiceHandler) SetMany(context.Context, *connect_go.BidiStream[v1.SetManyRequest, v1.SetManyResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ld.v1.LdService.SetMany is not implemented"))
}

func (UnimplementedLdServiceHandler) Get(context.Context, *connect_go.Request[v1.GetRequest]) (*connect_go.Response[v1.GetResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ld.v1.LdService.Get is not implemented"))
}

func (UnimplementedLdServiceHandler) GetMany(context.Context, *connect_go.BidiStream[v1.GetManyRequest, v1.GetManyResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ld.v1.LdService.GetMany is not implemented"))
}

func (UnimplementedLdServiceHandler) GetRange(context.Context, *connect_go.Request[v1.GetRangeRequest], *connect_go.ServerStream[v1.GetRangeResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ld.v1.LdService.GetRange is not implemented"))
}

func (UnimplementedLdServiceHandler) Delete(context.Context, *connect_go.Request[v1.DeleteRequest]) (*connect_go.Response[v1.DeleteResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ld.v1.LdService.Delete is not implemented"))
}

func (UnimplementedLdServiceHandler) DeleteMany(context.Context, *connect_go.BidiStream[v1.DeleteManyRequest, v1.DeleteManyResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ld.v1.LdService.DeleteMany is not implemented"))
}

func (UnimplementedLdServiceHandler) DeleteRange(context.Context, *connect_go.Request[v1.DeleteRangeRequest], *connect_go.ServerStream[v1.DeleteRangeResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ld.v1.LdService.DeleteRange is not implemented"))
}
