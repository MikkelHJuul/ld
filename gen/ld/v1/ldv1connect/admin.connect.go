// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: ld/v1/admin.proto

package ldv1connect

import (
	context "context"
	errors "errors"
	v1 "github.com/MikkelHJuul/ld/gen/ld/v1"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// AdminServiceName is the fully-qualified name of the AdminService service.
	AdminServiceName = "ld.v1.AdminService"
)

// AdminServiceClient is a client for the ld.v1.AdminService service.
type AdminServiceClient interface {
	Register(context.Context, *connect_go.Request[v1.RegisterRequest]) (*connect_go.Response[v1.RegisterResponse], error)
	RegistryInfo(context.Context, *connect_go.Request[v1.RegistryInfoRequest]) (*connect_go.Response[v1.RegistryInfoResponse], error)
	Registry(context.Context, *connect_go.Request[v1.RegistryRequest]) (*connect_go.Response[v1.RegistryResponse], error)
}

// NewAdminServiceClient constructs a client for the ld.v1.AdminService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAdminServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) AdminServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &adminServiceClient{
		register: connect_go.NewClient[v1.RegisterRequest, v1.RegisterResponse](
			httpClient,
			baseURL+"/ld.v1.AdminService/Register",
			opts...,
		),
		registryInfo: connect_go.NewClient[v1.RegistryInfoRequest, v1.RegistryInfoResponse](
			httpClient,
			baseURL+"/ld.v1.AdminService/RegistryInfo",
			opts...,
		),
		registry: connect_go.NewClient[v1.RegistryRequest, v1.RegistryResponse](
			httpClient,
			baseURL+"/ld.v1.AdminService/Registry",
			opts...,
		),
	}
}

// adminServiceClient implements AdminServiceClient.
type adminServiceClient struct {
	register     *connect_go.Client[v1.RegisterRequest, v1.RegisterResponse]
	registryInfo *connect_go.Client[v1.RegistryInfoRequest, v1.RegistryInfoResponse]
	registry     *connect_go.Client[v1.RegistryRequest, v1.RegistryResponse]
}

// Register calls ld.v1.AdminService.Register.
func (c *adminServiceClient) Register(ctx context.Context, req *connect_go.Request[v1.RegisterRequest]) (*connect_go.Response[v1.RegisterResponse], error) {
	return c.register.CallUnary(ctx, req)
}

// RegistryInfo calls ld.v1.AdminService.RegistryInfo.
func (c *adminServiceClient) RegistryInfo(ctx context.Context, req *connect_go.Request[v1.RegistryInfoRequest]) (*connect_go.Response[v1.RegistryInfoResponse], error) {
	return c.registryInfo.CallUnary(ctx, req)
}

// Registry calls ld.v1.AdminService.Registry.
func (c *adminServiceClient) Registry(ctx context.Context, req *connect_go.Request[v1.RegistryRequest]) (*connect_go.Response[v1.RegistryResponse], error) {
	return c.registry.CallUnary(ctx, req)
}

// AdminServiceHandler is an implementation of the ld.v1.AdminService service.
type AdminServiceHandler interface {
	Register(context.Context, *connect_go.Request[v1.RegisterRequest]) (*connect_go.Response[v1.RegisterResponse], error)
	RegistryInfo(context.Context, *connect_go.Request[v1.RegistryInfoRequest]) (*connect_go.Response[v1.RegistryInfoResponse], error)
	Registry(context.Context, *connect_go.Request[v1.RegistryRequest]) (*connect_go.Response[v1.RegistryResponse], error)
}

// NewAdminServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAdminServiceHandler(svc AdminServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/ld.v1.AdminService/Register", connect_go.NewUnaryHandler(
		"/ld.v1.AdminService/Register",
		svc.Register,
		opts...,
	))
	mux.Handle("/ld.v1.AdminService/RegistryInfo", connect_go.NewUnaryHandler(
		"/ld.v1.AdminService/RegistryInfo",
		svc.RegistryInfo,
		opts...,
	))
	mux.Handle("/ld.v1.AdminService/Registry", connect_go.NewUnaryHandler(
		"/ld.v1.AdminService/Registry",
		svc.Registry,
		opts...,
	))
	return "/ld.v1.AdminService/", mux
}

// UnimplementedAdminServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAdminServiceHandler struct{}

func (UnimplementedAdminServiceHandler) Register(context.Context, *connect_go.Request[v1.RegisterRequest]) (*connect_go.Response[v1.RegisterResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ld.v1.AdminService.Register is not implemented"))
}

func (UnimplementedAdminServiceHandler) RegistryInfo(context.Context, *connect_go.Request[v1.RegistryInfoRequest]) (*connect_go.Response[v1.RegistryInfoResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ld.v1.AdminService.RegistryInfo is not implemented"))
}

func (UnimplementedAdminServiceHandler) Registry(context.Context, *connect_go.Request[v1.RegistryRequest]) (*connect_go.Response[v1.RegistryResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ld.v1.AdminService.Registry is not implemented"))
}
